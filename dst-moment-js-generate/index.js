/**
 * This script is used to generate timestampt arrays that cross DST
 * 
 * cd dst-moment-js-generate
 * npm install
 * node index.js
 */


// generated by moment JS .add(1, 'day'). Source of truth
const dstCross1Array = [
    1679702400000, //'2023-03-25T00:00:00', 2023-03-25T00:00:00.000Z
    1679788800000, //'2023-03-26T00:00:00', 2023-03-26T00:00:00.000Z DST at 2am

    // all representation are correct see difference in day and time
    1679871600000, //'2023-03-27T00:00:00+01:00', 2023-03-26T23:00:00.000Z
    1679958000000, //'2023-03-28T00:00:00+01:00', 2023-03-27T23:00:00.000Z
];

// generated by moment JS .add(1, 'day'). Source of truth
const dstCross2Array = [
    1698447600000, // '2023-10-28T00:00:00+01:00',
    1698534000000, // '2023-10-29T00:00:00+01:00', DST at 2am
    1698624000000, // '2023-10-30T00:00:00',
    1698710400000, // '2023-10-31T00:00:00',
];

// generated by moment JS .add(1, 'day'). Source of truth. 'Europe/Istanbul'
const dstCross3Array = [
    1679691600000, // 2023-03-25T00:00:00+03:00,
    1679778000000, // 2023-03-26T00:00:00+03:00, NO DST at 2am
    1679864400000, // 2023-03-27T00:00:00+03:00,
    1679950800000, // 2023-03-28T00:00:00+03:00,
];

momentTest();
DayJsTest();
LuxonTest();

// moment js works correctly with DST
function momentTest(startDateStr = '2023-03-24T00:00:00', timeZone = 'Europe/London') {
    const moment = require('moment-timezone/builds/moment-timezone-with-data-10-year-range');

    console.log();
    console.log('////////////////////////////////////////');
    console.log('----------------MOMENT------------------');

    const date = moment.tz(startDateStr, timeZone);
    const dateIso = date.clone();
    for (let index = 0; index < 4; index++) {
        const dateStr = date.add(1, 'day').format();
        const dateIsoStr = dateIso.add(1, 'day').toISOString();
        const timestamp = date.valueOf();
        const utcOffset = date.utcOffset();

        const parsedLocalTime = moment.tz(timestamp, timeZone);
        console.log(`${dateStr},\t${dateIsoStr}`);
        console.log(`UTC timestap and offset: ${timestamp},\t${utcOffset}`);
        console.log(`Parsed local time: ${parsedLocalTime.format()}, timestamp: ${parsedLocalTime.valueOf()}`);
        console.log(`IS VALID: ${parsedLocalTime.format() === dateStr}`);
        console.log('----------------------------------------');
    }
}

function DayJsTest(startDateStr = '2023-03-24T00:00:00', timeZone = 'Europe/London') {
    const dayjs = require('dayjs')

    var utc = require('dayjs/plugin/utc')
    var timezone = require('dayjs/plugin/timezone') // dependent on utc plugin
    dayjs.extend(utc);
    dayjs.extend(timezone);
    
    console.log();
    console.log('////////////////////////////////////////');
    console.log('----------------DAYJS-------------------');
    let date = dayjs.tz(startDateStr, timeZone);
    for (let index = 0; index < 4; index++) {
        date = date.add(1, 'day');
        const dateStr = date.format();
        const dateIsoStr = date.toISOString();
        const timestamp = date.valueOf();
        const utcOffset = date.utcOffset();

        const parsedLocalTime = dayjs.tz(timestamp, timeZone);
        console.log(`${dateStr},\t${dateIsoStr}`);
        console.log(`UTC timestap and offset: ${timestamp},\t${utcOffset}`);
        console.log(`Parsed local time: ${parsedLocalTime.format()}`);
        console.log(`IS VALID: ${parsedLocalTime.format() === dateStr}`);
        console.log('----------------------------------------');
    }
}

function LuxonTest(startDateStr = '2023-03-24T00:00:00', timeZone = 'Europe/London') {
    const { DateTime } = require('luxon');

    console.log();
    console.log('////////////////////////////////////////');
    console.log('----------------LUXON-------------------');
    let date = DateTime.fromISO(startDateStr, { zone: timeZone });
    for (let index = 0; index < 4; index++) {
        date = date.plus({ days: 1 });
        const dateStr = date.toISO();
        const dateIsoStr = date.toISO();
        const timestamp = date.valueOf();
        const utcOffset = date.offset;

        const parsedLocalTime = DateTime.fromMillis(timestamp, { zone: timeZone });
        console.log(`${dateStr},\t${dateIsoStr}`);
        console.log(`UTC timestap and offset: ${timestamp},\t${utcOffset}`);
        console.log(`Parsed local time: ${parsedLocalTime.toISO()}, timestamp: ${parsedLocalTime.valueOf()}`);
        console.log(`IS VALID: ${parsedLocalTime.toISO() === dateStr}`);
        console.log('----------------------------------------');
    }
}
